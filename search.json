[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 dcmodifydb authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/dcmodifydb.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"dcmodifydb","text":"goal dcmodifydb apply modification rules specified dcmodify database table, allowing documented, reproducable data cleaning adjustments database. dcmodify separates intent execution: user specifies , automatic data change uses dcmodifydb execute tbl database table. dcmodidfydb optimized restricted database tables can accessed within R DBI. uses dbplyr package translate data correction rules R syntax SQL syntax. advantage approach data correction done within database, may requirement organisation data table simply large held memory. disadvantage R statements can translated SQL statement, dcmodifydb restricted dcmodify can use full R potential. Nonetheless dcmodifydb may sufficient efficient many use cases. common error scenario’s see vignette(\"scenarios\", package=\"dcmodifydb\"). supported syntax specifying rules see vignette(\"syntax\", package=\"dcmodifydb\").","code":""},{"path":"/articles/dcmodifydb.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"dcmodifydb","text":"dcmodifydb can installed loaded :","code":"install.packages(\"dcmodifydb\") library(dcmodify) library(dcmodifydb)"},{"path":"/articles/dcmodifydb.html","id":"usage","dir":"Articles","previous_headings":"Introduction","what":"Usage","title":"dcmodifydb","text":"dcmodifydb works database table, need connection table within database. set database table sqlite using person data set, use case connect database. know retrieve handle person table using dplyr person dataset clearly contains errors corrected. specify corrections using modifier rules apply directly functionmodify_so. First correct minors income year long year. Note corrections made copy table default, avoid accidents data. better approach store rules separately apply datatable. makes easier maintain set rules. dcmodify one can specify rules function modifier: m now set rules can applied data.frame tbl. Note rules executed sequentially, order given. example order rule M3 M4 matters: Rule M3 change record 1 smoker, rule M4 set number cigarettes 0. intentional: correction rules often order applied. Rule M5 shows example deriving new variable (ageclass) existing variables (age). Rule M6 shows example recoding, changing labels categories allowed set labels. nice properties modifier rules, can store extra metadata. name, label description can used describe intention rule. easy way describing properties exporting ruleset yaml specify rules using yaml file. export yml file can label describe rules, also add new rules. Note label description optional, much encouraged. corrections.yml can load rules : modify translates modification rules SQL code executes sql queries database. documentation implementation purpose can useful see generated sql code, documented rules. corrections.sql:","code":"con <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") dplyr::copy_to(con, person) person_tbl <- dplyr::tbl(con, \"person\") person_tbl #> # Source:   table<person> [?? x 6] #> # Database: sqlite 3.37.2 [:memory:] #>   income   age gender  year smokes cigarrettes #>    <int> <int> <chr>  <int> <chr>        <int> #> 1   2000    12 M       2020 no              10 #> 2   2010    14 f       2019 yes              4 #> 3   2010    25 v         19 no              NA library(dcmodify) # needed for modifying rules library(dcmodifydb) # needed to translate the rules modify_so( person_tbl          , if (age < 16) income = 0          , if (year < 25) year = year + 2000          ) #> Warning: `copy` not specified, setting `copy=TRUE`, working on copy of table. #> # Source:   lazy query [?? x 6] #> # Database: sqlite 3.37.2 [:memory:] #>   income   age gender  year smokes cigarrettes #>    <int> <int> <chr>  <int> <chr>        <int> #> 1      0    12 M       2020 no              10 #> 2      0    14 f       2019 yes              4 #> 3   2010    25 v       2019 no              NA # separate rule set m <- modifier( if (age < 16) income = 0              , if (year < 25) year = year + 2000              , if (cigarrettes > 0 ) smokes = \"yes\"              , if (smokes == \"no\") cigarrettes = 0              , ageclass <- if (age < 18) \"child\" else \"adult\"              , gender <- switch( toupper(gender)                                , \"F\" = \"F\"                                , \"V\" = \"F\" # common mistake                                , \"M\" = \"M\"                                , \"NB\"                                )              ) print(m) #> Object of class modifier with 6 elements: #> M1:  #>   if (age < 16) income = 0 #>  #> M2:  #>   if (year < 25) year = year + 2000 #>  #> M3:  #>   if (cigarrettes > 0) smokes = \"yes\" #>  #> M4:  #>   if (smokes == \"no\") cigarrettes = 0 #>  #> M5:  #>   ageclass <- if (age < 18) \"child\" else \"adult\" #>  #> M6:  #>   gender <- switch(toupper(gender), F = \"F\", V = \"F\", M = \"M\", \"NB\") # modify a copy of the table modify(person_tbl, m, copy = TRUE) #> # Source:   lazy query [?? x 6] #> # Database: sqlite 3.37.2 [:memory:] #>   income   age gender  year smokes cigarrettes ageclass #>    <int> <int> <chr>  <int> <chr>        <int> <chr>    #> 1      0    12 M       2020 yes             10 child    #> 2      0    14 F       2019 yes              4 child    #> 3   2010    25 F       2019 no               0 adult export_yaml(m, \"corrections.yml\") rules: - expr: if (age < 16) income = 0   name: M1   label: 'nochildlabor'   description: 'Children are not allowed to work' - expr: if (year < 25) year = year + 2000   name: M2   label: 'longyear'   description: 'Convert 2 digits year into 4 digits' - expr: if (cigarrettes > 0) smokes = \"yes\"   name: M3   label: 'smoker'   description: 'If you smoke you are a smoker...' - expr: if (smokes == \"no\") cigarrettes = 0   name: M4   label: 'nosmoke'   description: 'If you dont smoke, the number of cigarettes is zero' - expr: ageclass <- if (age < 18) \"child\" else \"adult\"   name: M5   label: 'ageclass'   description: 'Derive a new variable ageclass using the age variable' - expr: |     gender <- switch( toupper(gender)                     , F = \"F\"                     , V = \"F\"                     , M = \"M\"                     , \"NB\"                     )   name: M6   label: 'gender'   description: 'Map the labels for gender to M/F/NB' m <- modifier(.file = \"corrections.yml\") modify(person_tbl, m, copy = TRUE) #> # Source:   lazy query [?? x 6] #> # Database: sqlite 3.37.2 [:memory:] #>   income   age gender  year smokes cigarrettes ageclass #>    <int> <int> <chr>  <int> <chr>        <int> <chr>    #> 1      0    12 M       2020 yes             10 child    #> 2      0    14 F       2019 yes              4 child    #> 3   2010    25 F       2019 no               0 adult dump_sql(m, person_tbl, file = \"corrections.sql\") -- ------------------------------------- -- Generated with dcmodifydb, do not edit -- dcmodify version: 0.1.9 -- dcmodifydb version: 0.3.0.9000 -- dplyr version: 1.0.8 -- dbplyr version: 2.1.1 -- from: 'corrections.yml' -- date: 2022-03-09 -- -------------------------------------   ALTER TABLE `person` ADD COLUMN `ageclass` TEXT;  -- M1: nochildlabor -- Children are not allowed to work -- R expression: if (age < 16) income = 0 UPDATE `person` SET `income` = 0.0 WHERE `age` < 16.0;  -- M2: longyear -- Convert 2 digits year into 4 digits -- R expression: if (year < 25) year = year + 2000 UPDATE `person` SET `year` = `year` + 2000.0 WHERE `year` < 25.0;  -- M3: smoker -- If you smoke you are a smoker... -- R expression: if (cigarrettes > 0) smokes = \"yes\" UPDATE `person` SET `smokes` = 'yes' WHERE `cigarrettes` > 0.0;  -- M4: nosmoke -- If you dont smoke, the number of cigarettes is zero -- R expression: if (smokes == \"no\") cigarrettes = 0 UPDATE `person` SET `cigarrettes` = 0.0 WHERE `smokes` = 'no';  -- M5: ageclass -- Derive a new variable ageclass using the age variable -- R expression: ageclass <- if (age < 18) \"child\" else \"adult\" UPDATE `person` SET `ageclass` = 'child' WHERE `age` < 18.0;  UPDATE `person` SET `ageclass` = 'adult' WHERE NOT(`age` < 18.0);  -- M6: gender -- Map the labels for gender to M/F/NB -- R expression: gender <- switch(toupper(gender), F = \"F\", V = \"F\", M = \"M\", \"NB\") UPDATE `person` SET `gender` = CASE UPPER(`gender`) WHEN ('F') THEN ('F') WHEN ('V') THEN ('F') WHEN ('M') THEN ('M') ELSE ('NB') END ;"},{"path":"/articles/scenarios.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Correction scenarios","text":"goal dcmodifydb apply modification rules specified dcmodify database table, allowing documented, reproducable data cleaning adjustments database. document provides examples common error corrections scenario’s dcmodify can used.","code":""},{"path":"/articles/scenarios.html","id":"document-rules","dir":"Articles","previous_headings":"","what":"Document rules","title":"Correction scenarios","text":"good practice store intent description rule: enables future (co)workers dataset evaluate use rule. therefore recommended store rules yaml format document rule accordingly.","code":""},{"path":[]},{"path":"/articles/scenarios.html","id":"replacing-common-mistakes","dir":"Articles","previous_headings":"Error scenario’s","what":"Replacing common mistakes","title":"Correction scenarios","text":"","code":"m <- modifier( if (year < 25) year = year + 2000) m <- modifier( if (year < 100){   if (year > 25) {     year = year + 1900   } else {     year = year + 2000   } })"},{"path":"/articles/scenarios.html","id":"replacing-missing-values","dir":"Articles","previous_headings":"Error scenario’s","what":"Replacing missing values","title":"Correction scenarios","text":"value measured (NA), can deduced certain value, e.g. zero. Suppose health questionair contains questions person smokes many cigarretes per day. Typically answer first question “”, second question asked thus “unmeasured”, can deduced 0.","code":"if (smokes ==  FALSE) cigarretes = 0 #> Warning in `[<-.data.frame`(`*tmp*`, I, , value = structure(list(smokes = #> FALSE, : provided 3 variables to replace 2 variables"},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/scenarios.html","id":"if-rule","dir":"Articles","previous_headings":"Syntax","what":"if rule","title":"Correction scenarios","text":"following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier( if (age < 12) income = 0) if (age < 12) income = 0  # R noobs if (age < 12) income <- 0 # a bit more R-y income[age < 12] <- 0     # very R-y"},{"path":"/articles/scenarios.html","id":"else","dir":"Articles","previous_headings":"Syntax > if rule","what":"else","title":"Correction scenarios","text":"rule may followed else else following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier(if (age > 67) {retired = TRUE} else {retired = FALSE}) if (age > 67) {retired = TRUE} else {retired = FALSE} # R noobs if (age > 67) {retired <- TRUE} else {retired <- FALSE} # R-y retired <- if (age > 67) TRUE else FALSE # very R-y retired <- age > 67 # very R-y"},{"path":"/articles/scenarios.html","id":"multiple-assignments","dir":"Articles","previous_headings":"Syntax > if rule","what":"multiple assignments","title":"Correction scenarios","text":"","code":"m <- modifier(    if (age > 67) {     retired = TRUE     salary = 0    } )"},{"path":[]},{"path":"/articles/syntax.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modification syntax","text":"goal dcmodifydb apply modification rules specified dcmodify database table, allowing documented, reproducable data cleaning adjustments database. vignette describes supported syntax can used dcmodify dcmodifydb. common error scenario’s see vignette(\"scenarios\", package=\"dcmodifydb\")","code":""},{"path":[]},{"path":"/articles/syntax.html","id":"if-rule","dir":"Articles","previous_headings":"Syntax","what":"if rule","title":"Modification syntax","text":"following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier( if (age < 12) income = 0) if (age < 12) income = 0  # R noobs if (age < 12) income <- 0 # a bit more R-y income[age < 12] <- 0     # very R-y"},{"path":"/articles/syntax.html","id":"else","dir":"Articles","previous_headings":"Syntax > if rule","what":"else","title":"Modification syntax","text":"rule may followed else else following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier(if (age > 67) {retired = TRUE} else {retired = FALSE}) if (age > 67) {retired = TRUE} else {retired = FALSE} # R noobs if (age > 67) {retired <- TRUE} else {retired <- FALSE} # R-y retired <- if (age > 67) TRUE else FALSE # very R-y retired <- age > 67 # very R-y"},{"path":"/articles/syntax.html","id":"multiple-assignments","dir":"Articles","previous_headings":"Syntax > if rule","what":"multiple assignments","title":"Modification syntax","text":"","code":"m <- modifier(    if (age > 67) {     retired = TRUE     salary = 0    } )"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin de Jonge. Author, maintainer. Wytze Gelderloos. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Jonge E (2022). dcmodifydb: Modifying Rules DataBase. R package version 0.3.0.9000, https://github.com/data-cleaning/dcmodifydb.","code":"@Manual{,   title = {dcmodifydb: Modifying Rules on a DataBase},   author = {Edwin {de Jonge}},   year = {2022},   note = {R package version 0.3.0.9000},   url = {https://github.com/data-cleaning/dcmodifydb}, }"},{"path":"/index.html","id":"dcmodifydb","dir":"","previous_headings":"","what":"Modifying Rules on a DataBase","title":"Modifying Rules on a DataBase","text":"goal dcmodifydb apply modification rules specified dcmodify database table, allowing documented, reproducable data cleaning adjustments database. dcmodify separates intent execution: user specifies , automatic data change uses dcmodifydb execute tbl database table.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modifying Rules on a DataBase","text":"development version GitHub can installed :","code":"# install.packages(\"devtools\") devtools::install_github(\"data-cleaning/dcmodifydb\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Modifying Rules on a DataBase","text":"","code":"library(DBI) library(dcmodify) library(dcmodifydb)  # silly modification rules m <- modifier( if (cyl == 6)  gear <- 10              , gear[cyl == 4] <- 0  # this R syntax works too :-)              , if (gear == 3) cyl <- 2              )  # setting up a table in the database con <- dbConnect(RSQLite::SQLite()) dbWriteTable(con, \"mtcars\", mtcars[,c(\"cyl\", \"gear\")]) tbl_mtcars <- dplyr::tbl(con, \"mtcars\")  # \"Houston, we have a table\" head(tbl_mtcars) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.36.0 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6     4 #> 2     6     4 #> 3     4     4 #> 4     6     3 #> 5     8     3 #> 6     6     3  # lets modify on a copy of the table... tbl_m <- modify(tbl_mtcars, m, copy=TRUE)  # and gear has changed... head(tbl_m) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.36.0 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6    10 #> 2     6    10 #> 3     4     0 #> 4     6    10 #> 5     2     3 #> 6     6    10  dbDisconnect(con)"},{"path":"/index.html","id":"documented-rules","dir":"","previous_headings":"Example","what":"Documented rules","title":"Modifying Rules on a DataBase","text":"can use YAML store modification rules: “example.yml” Let’s load rules apply data set: Generated sql can written dump_sql modify.sql: Note: Modification rules can written yaml as_yaml export_yaml.","code":"library(DBI) library(dcmodify) library(dcmodifydb) con <- dbConnect(RSQLite::SQLite()) rules: - expr: if (age > 130) age = 130L   name: M1   label: 'Maximum age'   description: |     Human age is limited. (can use  \"=\")     Cap the age at 130 - expr: is.na(age) <- age < 0   name: M2   label: 'Unknown age'   description: |     Negative Age, nah...     (set to NA) - expr: income[age < 12] <- 0   name: M3   label: 'No Child Labor'   description: |     Children should not work. (R syntax)     Set income to zero for children. - expr: \"retired <- age > 67\"   name: M4   label: 'Retired'   description: |     Derive a new variable... - expr: if (age < 18) age_class = 'child' else age_class = 'adult'   name: M5   label: 'Age class'   description: |     Derive a new variable with if else m <- modifier(.file = \"example.yml\") print(m) #> Object of class modifier with 5 elements: #> M1: Maximum age #>   if (age > 130) age = 130 #>  #> M2: Unknown age #>   is.na(age) <- age < 0 #>  #> M3: No Child Labor #>   income[age < 12] <- 0 #>  #> M4: Retired #>   retired <- age > 67 #>  #> M5: Age class #>   if (age < 18) age_class = \"child\" else age_class = \"adult\" # setup the data \"age, income   11,   2000  150,    300   25,   2000  -10,   2000 \" -> csv income <- read.csv(text = csv, strip.white = TRUE) dbWriteTable(con, \"income\", income) tbl_income <- dplyr::tbl(con, \"income\")  # this is the table in the data base tbl_income #> # Source:   table<income> [?? x 2] #> # Database: sqlite 3.36.0 [] #>     age income #>   <int>  <int> #> 1    11   2000 #> 2   150    300 #> 3    25   2000 #> 4   -10   2000  # and now after modification modify(tbl_income, m, copy = FALSE)  #> # Source:   table<income> [?? x 2] #> # Database: sqlite 3.36.0 [] #>     age income retired age_class #>   <int>  <int>   <int> <chr>     #> 1    11      0       0 child     #> 2   130    300       1 adult     #> 3    25   2000       0 adult     #> 4    NA   2000      NA <NA> dump_sql(m, tbl_income, file = \"modify.sql\") -- ------------------------------------- -- Generated with dcmodifydb, do not edit -- dcmodify version: 0.1.9 -- dcmodifydb version: 0.3.0.9000 -- dplyr version: 1.0.7 -- dbplyr version: 2.1.1 -- from: 'example/example.yml' -- date: 2022-03-08 -- -------------------------------------   ALTER TABLE `income` ADD COLUMN `retired` INT;  ALTER TABLE `income` ADD COLUMN `age_class` TEXT;  -- M1: Maximum age -- Human age is limited. (can use  \"=\") -- Cap the age at 130 --  -- R expression: if (age > 130) age = 130 UPDATE `income` SET `age` = 130 WHERE `age` > 130.0;  -- M2: Unknown age -- Negative Age, nah... -- (set to NA) --  -- R expression: is.na(age) <- age < 0 UPDATE `income` SET `age` = NULL WHERE `age` < 0.0;  -- M3: No Child Labor -- Children should not work. (R syntax) -- Set income to zero for children. --  -- R expression: income[age < 12] <- 0 UPDATE `income` SET `income` = 0.0 WHERE `age` < 12.0;  -- M4: Retired -- Derive a new variable... --  -- R expression: retired <- age > 67 UPDATE `income` SET `retired` = `age` > 67.0 ;  -- M5: Age class -- Derive a new variable with if else --  -- R expression: if (age < 18) age_class = \"child\" else age_class = \"adult\" UPDATE `income` SET `age_class` = 'child' WHERE `age` < 18.0;  UPDATE `income` SET `age_class` = 'adult' WHERE NOT(`age` < 18.0); dbDisconnect(con) dcmodify::export_yaml(m, \"cleaning_steps.yml\")"},{"path":"/reference/dcmodifydb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","title":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","text":"Apply modification rules R package 'dcmodify' database, prescribing documenting deterministic data cleaning steps records database. rules translated SQL statements using R package 'dbplyr'.","code":""},{"path":[]},{"path":"/reference/dcmodifydb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","text":"Maintainer: Edwin de Jonge edwindjonge@gmail.com (ORCID) contributors: Wytze Gelderloos [contributor]","code":""},{"path":"/reference/dump_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Write generated sql — dump_sql","title":"Write generated sql — dump_sql","text":"Writes generated sql file. script contains ALTER UPDATE statements can used documentation. Note script run database change original table. differs default behavior dcmodify works (temporary) copy table.","code":""},{"path":"/reference/dump_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write generated sql — dump_sql","text":"","code":"dump_sql(x, table, con = NULL, file = stdout(), ...)"},{"path":"/reference/dump_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write generated sql — dump_sql","text":"x dcmodify::modifier() object rules written table either dplyr::tbl() object character table name con optional, table character, dbi connection. file sql written. ... used","code":""},{"path":"/reference/dump_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write generated sql — dump_sql","text":"character sql script statements.","code":""},{"path":"/reference/get_table_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table connection — get_table_con","title":"Get table connection — get_table_con","text":"Gets table connection, possibly copy table.","code":""},{"path":"/reference/get_table_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table connection — get_table_con","text":"","code":"get_table_con(table, con = NULL, copy = NULL)"},{"path":"/reference/get_table_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table connection — get_table_con","text":"table either character tbl_sql object con dbi connection copy copy table generated?","code":""},{"path":"/reference/is_working_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if UPDATE statement is functional — is_working_db","title":"Check if UPDATE statement is functional — is_working_db","text":"Get indication R statement can executed SQL database.","code":""},{"path":"/reference/is_working_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if UPDATE statement is functional — is_working_db","text":"","code":"is_working_db(m, tab, n = 2, warn = TRUE, sql_warn = FALSE)"},{"path":"/reference/is_working_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if UPDATE statement is functional — is_working_db","text":"m modifier() object tab tbl object n number records use check warn generate warnings non-working rules sql_warn generate warnings sql code non-working rules","code":""},{"path":"/reference/is_working_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if UPDATE statement is functional — is_working_db","text":"logical statements working","code":""},{"path":"/reference/is_working_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if UPDATE statement is functional — is_working_db","text":"","code":"person <- dbplyr::memdb_frame(age = 12, salary = 3000)  library(dcmodify)  correction_rules <- modifier( if (age < 16) salary = 0                             , if (retired == TRUE) salary = 0                             )  # second rule is not working, because retired is not available is_working_db(correction_rules, person, warn = FALSE) #> [1]  TRUE FALSE  # show warnings (default) is_working_db(correction_rules, person, warn = TRUE) #> Warning: The following rule(s) are not working on the db: #>  #> - M2: if (retired == TRUE) salary = 0 #>  #> -------------------------------------------------------------- #>  use 'is_working_db' with sql_warn=TRUE for more information #> -------------------------------------------------------------- #> [1]  TRUE FALSE  # show the sql statements that are not working is_working_db(correction_rules, person, warn = FALSE, sql_warn = TRUE) #> Warning: The following sql statements are not working on the database: #>  #> -- Rule  M2  #>  UPDATE dcmodifydb_866195 #> SET `salary` = 0.0 #> WHERE `retired` = 1; #> [1]  TRUE FALSE"},{"path":"/reference/modifier_to_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract UPDATE statements — modifier_to_sql","title":"Extract UPDATE statements — modifier_to_sql","text":"Extract UPDATE statements modifier object list SQL statements.","code":""},{"path":"/reference/modifier_to_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract UPDATE statements — modifier_to_sql","text":"","code":"modifier_to_sql(x, table, con = NULL)"},{"path":"/reference/modifier_to_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract UPDATE statements — modifier_to_sql","text":"x dcmodify::modifier() object table table object con optional connection","code":""},{"path":"/reference/modifier_to_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract UPDATE statements — modifier_to_sql","text":"list sql UPDATE statements.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify records in a tbl — modify,ANY,modifier-method","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"Modify records database table using modification rules specified modifier object.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"","code":"# S4 method for ANY,modifier modify(   dat,   x,   copy = NULL,   transaction = !isTRUE(copy),   ignore_nw = FALSE,   ... )"},{"path":"/reference/modify-ANY-modifier-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"dat tbl_sql() object, table SQL database x dcmodify::modifier() object. copy TRUE (default), modify copy table transaction TRUE use one transaction modifications. ignore_nw TRUE non-working rules ignored ... unused","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"tbl_sql() object, referencing modified table object.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"modification rules translated SQL update statements executed table. Note default updates executed copy table. default transaction FALSE copy=TRUE TRUE copy=FALSE transaction = TRUE modification fails, modifications rolled back.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"","code":"library(DBI) library(dcmodify) library(dcmodifydb)  # silly modification rules m <- modifier( if (cyl == 6)  gear <- 10              , gear[cyl == 4] <- 0  # this R syntax works too :-)              , if (gear == 3) cyl <- 2              )  # setting up a table in the database con <- dbConnect(RSQLite::SQLite()) dbWriteTable(con, \"mtcars\", mtcars[,c(\"cyl\", \"gear\")]) tbl_mtcars <- dplyr::tbl(con, \"mtcars\")  # \"Houston, we have a table\" head(tbl_mtcars) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.37.2 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6     4 #> 2     6     4 #> 3     4     4 #> 4     6     3 #> 5     8     3 #> 6     6     3  # lets modify on a copy of the table... tbl_m <- modify(tbl_mtcars, m, copy=TRUE)  # and gear has changed... head(tbl_m) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.37.2 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6    10 #> 2     6    10 #> 3     4     0 #> 4     6    10 #> 5     2     3 #> 6     6    10  dbDisconnect(con)"},{"path":"/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Person data with income and smoking habits — person","title":"Person data with income and smoking habits — person","text":"synthetic data set records corrected.","code":""},{"path":"/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Person data with income and smoking habits — person","text":"","code":"person"},{"path":"/reference/person.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Person data with income and smoking habits — person","text":"data frame x rows variables: income monthly income, US dollars age age person year gender gender person year year measurement smokes person smokes cigarrettes many cigarretes person smokes dataset also available sqlite database system.file(\"db/person.db\", package=\"dcmodifydb\")","code":""},{"path":"/news/index.html","id":"dcmodifydb-030","dir":"Changelog","previous_headings":"","what":"dcmodifydb 0.3.0","title":"dcmodifydb 0.3.0","text":"Improved messages non-working rules (#1) Thanks Marlou van de Sande Fix statements using %% (bug #2), due validate replaced %vin%. Thanks Marlou van de Sande reporting. Tables schema working (bug issue #3), now fixed. Added restriction R >= 4.0. Thanks @Wytzepakito, #6","code":""}]
