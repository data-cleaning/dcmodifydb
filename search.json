[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 dcmodifydb authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/dcmodifydb.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"dcmodifydb","text":"","code":"library(dcmodify) library(dcmodifydb)"},{"path":[]},{"path":"/articles/dcmodifydb.html","id":"if-rule","dir":"Articles","previous_headings":"Syntax","what":"if rule","title":"dcmodifydb","text":"following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier( if (age < 12) income = 0) if (age < 12) income = 0  # R noobs if (age < 12) income <- 0 # a bit more R-y income[age < 12] <- 0     # very R-y"},{"path":"/articles/dcmodifydb.html","id":"else","dir":"Articles","previous_headings":"Syntax > if rule","what":"else","title":"dcmodifydb","text":"rule may followed else else following statements equivalent. wise choose syntax familiar persons specifying correction rules.","code":"m <- modifier(if (age > 67) {retired = TRUE} else {retired = FALSE}) if (age > 67) {retired = TRUE} else {retired = FALSE} # R noobs if (age > 67) {retired <- TRUE} else {retired <- FALSE} # R-y retired <- if (age > 67) TRUE else FALSE # very R-y retired <- age > 67 # very R-y"},{"path":"/articles/dcmodifydb.html","id":"multiple-assignments","dir":"Articles","previous_headings":"Syntax > if rule","what":"multiple assignments","title":"dcmodifydb","text":"","code":"m <- modifier(    if (age > 67) {     retired = TRUE     salary = 0    } )"},{"path":[]},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin de Jonge. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Jonge E (2022). dcmodifydb: Modifying Rules DataBase. R package version 0.3.0.9000, https://github.com/data-cleaning/dcmodifydb.","code":"@Manual{,   title = {dcmodifydb: Modifying Rules on a DataBase},   author = {Edwin {de Jonge}},   year = {2022},   note = {R package version 0.3.0.9000},   url = {https://github.com/data-cleaning/dcmodifydb}, }"},{"path":"/index.html","id":"dcmodifydb","dir":"","previous_headings":"","what":"Modifying Rules on a DataBase","title":"Modifying Rules on a DataBase","text":"goal dcmodifydb apply modification rules specified dcmodify database table, allowing documented, reproducable data cleaning adjustments database. dcmodifydb separates intent execution: user specifies , automatic data change uses dcmodify execute tbl database table.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modifying Rules on a DataBase","text":"development version GitHub can installed :","code":"# install.packages(\"devtools\") devtools::install_github(\"data-cleaning/dcmodifydb\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Modifying Rules on a DataBase","text":"","code":"library(DBI) library(dcmodify) library(dcmodifydb)  # silly modification rules m <- modifier( if (cyl == 6)  gear <- 10              , gear[cyl == 4] <- 0  # this R syntax works too :-)              , if (gear == 3) cyl <- 2              )  # setting up a table in the database con <- dbConnect(RSQLite::SQLite()) dbWriteTable(con, \"mtcars\", mtcars[,c(\"cyl\", \"gear\")]) tbl_mtcars <- dplyr::tbl(con, \"mtcars\")  # \"Houston, we have a table\" head(tbl_mtcars) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.35.5 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6     4 #> 2     6     4 #> 3     4     4 #> 4     6     3 #> 5     8     3 #> 6     6     3  # lets modify on a copy of the table... tbl_m <- modify(tbl_mtcars, m, copy=TRUE) # and gear has changed... head(tbl_m) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.35.5 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6    10 #> 2     6    10 #> 3     4     0 #> 4     6    10 #> 5     2     3 #> 6     6    10  dbDisconnect(con)"},{"path":"/index.html","id":"documented-rules","dir":"","previous_headings":"Example","what":"Documented rules","title":"Modifying Rules on a DataBase","text":"can use YAML store modification rules: “example.yml” Let’s load rules apply data set: Generated sql can written dump_sql modify.sql: Note: Modification rules can written yaml as_yaml export_yaml.","code":"library(DBI) library(dcmodify) library(dcmodifydb) con <- dbConnect(RSQLite::SQLite()) rules: - expr: if (age > 130) age = 130L   name: M1   label: 'Maximum age'   description: |     Human age is limited. (can use  \"=\")     Cap the age at 130 - expr: is.na(age) <- age < 0   name: M2   label: 'Unknown age'   description: |     Negative Age, nah...     (set to NA) - expr: income[age < 12] <- 0   name: M3   label: 'No Child Labor'   description: |     Children should not work. (R syntax)     Set income to zero for children. - expr: \"retired <- age > 67\"   name: M4   label: 'Retired'   description: |     Derive a new variable... - expr: if (age < 18) age_class = 'child' else age_class = 'adult'   name: M5   label: 'Age class'   description: |     Derive a new variable with if else m <- modifier(.file = \"example.yml\") print(m) #> Object of class modifier with 5 elements: #> M1: Maximum age #>   if (age > 130) age = 130 #>  #> M2: Unknown age #>   is.na(age) <- age < 0 #>  #> M3: No Child Labor #>   income[age < 12] <- 0 #>  #> M4: Retired #>   retired <- age > 67 #>  #> M5: Age class #>   if (age < 18) age_class = \"child\" else age_class = \"adult\" # setup the data \"age, income   11,   2000  150,    300   25,   2000  -10,   2000 \" -> csv income <- read.csv(text = csv, strip.white = TRUE) dbWriteTable(con, \"income\", income) tbl_income <- dplyr::tbl(con, \"income\")  # this is the table in the data base tbl_income #> # Source:   table<income> [?? x 2] #> # Database: sqlite 3.35.5 [] #>     age income #>   <int>  <int> #> 1    11   2000 #> 2   150    300 #> 3    25   2000 #> 4   -10   2000  # and now after modification modify(tbl_income, m, copy = FALSE)  #> # Source:   table<income> [?? x 2] #> # Database: sqlite 3.35.5 [] #>     age income retired age_class #>   <int>  <int>   <int> <chr>     #> 1    11      0       0 child     #> 2   130    300       1 adult     #> 3    25   2000       0 adult     #> 4    NA   2000      NA <NA> dump_sql(m, tbl_income, file = \"modify.sql\") -- ------------------------------------- -- Generated with dcmodifydb, do not edit -- dcmodify version: 0.1.9 -- dcmodifydb version: 0.3.0 -- dplyr version: 1.0.7 -- dbplyr version: 2.1.1 -- from: 'example/example.yml' -- date: 2022-02-18 -- -------------------------------------   ALTER TABLE `income` ADD COLUMN `retired` integer;  ALTER TABLE `income` ADD COLUMN `age_class` character;  -- M1: Maximum age -- Human age is limited. (can use  \"=\") -- Cap the age at 130 --  -- R expression: if (age > 130) age = 130 UPDATE `income` SET `age` = 130 WHERE `age` > 130.0;  -- M2: Unknown age -- Negative Age, nah... -- (set to NA) --  -- R expression: is.na(age) <- age < 0 UPDATE `income` SET `age` = NULL WHERE `age` < 0.0;  -- M3: No Child Labor -- Children should not work. (R syntax) -- Set income to zero for children. --  -- R expression: income[age < 12] <- 0 UPDATE `income` SET `income` = 0.0 WHERE `age` < 12.0;  -- M4: Retired -- Derive a new variable... --  -- R expression: retired <- age > 67 UPDATE `income` SET `retired` = `age` > 67.0 ;  -- M5: Age class -- Derive a new variable with if else --  -- R expression: if (age < 18) age_class = \"child\" else age_class = \"adult\" UPDATE `income` SET `age_class` = 'child' WHERE `age` < 18.0;  UPDATE `income` SET `age_class` = 'adult' WHERE NOT(`age` < 18.0); dbDisconnect(con) dcmodify::export_yaml(m, \"cleaning_steps.yml\")"},{"path":"/reference/dcmodifydb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","title":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","text":"Apply modification rules R package 'dcmodify' database, prescribing documenting deterministic data cleaning steps records database. rules translated SQL statements using R package 'dbplyr'.","code":""},{"path":[]},{"path":"/reference/dcmodifydb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dcmodifydb: Modifying Rules on a DataBase — dcmodifydb-package","text":"Maintainer: Edwin de Jonge edwindjonge@gmail.com (ORCID)","code":""},{"path":"/reference/dump_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Write generated sql — dump_sql","title":"Write generated sql — dump_sql","text":"Writes generated sql file. script contains ALTER UPDATE statements can used documentation. Note script run database change original table. differs default behavior dcmodify works (temporary) copy table.","code":""},{"path":"/reference/dump_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write generated sql — dump_sql","text":"","code":"dump_sql(x, table, con = NULL, file = stdout(), ...)"},{"path":"/reference/dump_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write generated sql — dump_sql","text":"x dcmodify::modifier() object rules written table either dplyr::tbl() object character table name con optional, table character, dbi connection. file sql written. ... used","code":""},{"path":"/reference/dump_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write generated sql — dump_sql","text":"character sql script statements.","code":""},{"path":"/reference/get_table_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Get table connection — get_table_con","title":"Get table connection — get_table_con","text":"Gets table connection, possibly copy table.","code":""},{"path":"/reference/get_table_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get table connection — get_table_con","text":"","code":"get_table_con(table, con = NULL, copy = NULL)"},{"path":"/reference/get_table_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get table connection — get_table_con","text":"table either character tbl_sql object con dbi connection copy copy table generated?","code":""},{"path":"/reference/is_working_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if UPDATE statement is functional — is_working_db","title":"Check if UPDATE statement is functional — is_working_db","text":"Get indication R statement can executed SQL database.","code":""},{"path":"/reference/is_working_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if UPDATE statement is functional — is_working_db","text":"","code":"is_working_db(m, tab, n = 2, warn = TRUE, sql_warn = FALSE)"},{"path":"/reference/is_working_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if UPDATE statement is functional — is_working_db","text":"m modifier() object tab tbl object n number records use check warn generate warnings non-working rules sql_warn generate warnings sql code non-working rules","code":""},{"path":"/reference/is_working_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if UPDATE statement is functional — is_working_db","text":"logical statements working","code":""},{"path":"/reference/is_working_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if UPDATE statement is functional — is_working_db","text":"","code":"person <- dbplyr::memdb_frame(age = 12, salary = 3000)  library(dcmodify)  correction_rules <- modifier( if (age < 16) salary = 0                             , if (retired == TRUE) salary = 0                             )  # second rule is not working, because retired is not available is_working_db(correction_rules, person, warn = FALSE) #> [1]  TRUE FALSE  # show warnings (default) is_working_db(correction_rules, person, warn = TRUE) #> Warning: The following rule(s) are not working on the db: #>  #> - M2: if (retired == TRUE) salary = 0 #>  #> -------------------------------------------------------------- #>  use 'is_working_db' with sql_warn=TRUE for more information #> -------------------------------------------------------------- #> [1]  TRUE FALSE  # show the sql statements that are not working is_working_db(correction_rules, person, warn = FALSE, sql_warn = TRUE) #> Warning: The following sql statements are not working on the database: #>  #> -- Rule  M2  #>  UPDATE dcmodifydb_1589573 #> SET `salary` = 0.0 #> WHERE `retired` = 1; #> [1]  TRUE FALSE"},{"path":"/reference/modifier_to_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract UPDATE statements — modifier_to_sql","title":"Extract UPDATE statements — modifier_to_sql","text":"Extract UPDATE statements modifier object list SQL statements.","code":""},{"path":"/reference/modifier_to_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract UPDATE statements — modifier_to_sql","text":"","code":"modifier_to_sql(x, table, con = NULL)"},{"path":"/reference/modifier_to_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract UPDATE statements — modifier_to_sql","text":"x dcmodify::modifier() object table table object con optional connection","code":""},{"path":"/reference/modifier_to_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract UPDATE statements — modifier_to_sql","text":"list sql UPDATE statements.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify records in a tbl — modify,ANY,modifier-method","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"Modify records database table using modification rules specified modifier object.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"","code":"# S4 method for ANY,modifier modify(   dat,   x,   copy = NULL,   transaction = !isTRUE(copy),   ignore_nw = FALSE,   ... )"},{"path":"/reference/modify-ANY-modifier-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"dat tbl_sql() object, table SQL database x dcmodify::modifier() object. copy TRUE (default), modify copy table transaction TRUE use one transaction modifications. ignore_nw TRUE non-working rules ignored ... unused","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"tbl_sql() object, referencing modified table object.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"modification rules translated SQL update statements executed table. Note default updates executed copy table. default transaction FALSE copy=TRUE TRUE copy=FALSE transaction = TRUE modification fails, modifications rolled back.","code":""},{"path":"/reference/modify-ANY-modifier-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify records in a tbl — modify,ANY,modifier-method","text":"","code":"library(DBI) library(dcmodify) library(dcmodifydb)  # silly modification rules m <- modifier( if (cyl == 6)  gear <- 10              , gear[cyl == 4] <- 0  # this R syntax works too :-)              , if (gear == 3) cyl <- 2              )  # setting up a table in the database con <- dbConnect(RSQLite::SQLite()) dbWriteTable(con, \"mtcars\", mtcars[,c(\"cyl\", \"gear\")]) tbl_mtcars <- dplyr::tbl(con, \"mtcars\")  # \"Houston, we have a table\" head(tbl_mtcars) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.37.2 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6     4 #> 2     6     4 #> 3     4     4 #> 4     6     3 #> 5     8     3 #> 6     6     3  # lets modify on a copy of the table... tbl_m <- modify(tbl_mtcars, m, copy=TRUE)  # and gear has changed... head(tbl_m) #> # Source:   lazy query [?? x 2] #> # Database: sqlite 3.37.2 [] #>     cyl  gear #>   <dbl> <dbl> #> 1     6    10 #> 2     6    10 #> 3     4     0 #> 4     6    10 #> 5     2     3 #> 6     6    10  dbDisconnect(con)"},{"path":"/news/index.html","id":"dcmodifydb-030","dir":"Changelog","previous_headings":"","what":"dcmodifydb 0.3.0","title":"dcmodifydb 0.3.0","text":"Improved messages non-working rules (#1) Thanks Marlou van de Sande Fix statements using %% (bug #2), due validate replaced %vin%. Thanks Marlou van de Sande reporting. Tables schema working (bug issue #3), now fixed.","code":""}]
